stages:
  - Image Build
  - Deployment
  - Restart Pods
  - Image Scan

include:
  - project: 'DSO/DASTScanner'
    file: '.gitlab-ci.yml'
  - remote: 'https://gitlab.com/prismacloud-public/shift-left/extension/-/raw/master/.pcs.gitlab-ci.yml'
  - local: 'version.yml'

CopyDevImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # PiSCES django image
    - echo "FROM ghcr.io/quanted/pisces_app:dev-k" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/pisces_django:$CI_COMMIT_REF_NAME
    # PiSCES nginx image
    - echo "FROM ghcr.io/quanted/pisces-nginx:dev-gl" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/pisces_nginx:$CI_COMMIT_REF_NAME
    # PiSCES postgres image
    - echo "FROM ghcr.io/quanted/pisces-postgres:dev-gl" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/pisces_postgres:$CI_COMMIT_REF_NAME
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

SetProdImages:
  stage: Image Build
  tags:
    - qed-stg-runner
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p /workspace
    # PiSCES django image
    - echo "FROM $CI_REGISTRY_IMAGE/pisces_django:dev-gl" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/pisces_django:main-$PROD_VERSION
    # PiSCES nginx image
    - echo "FROM $CI_REGISTRY_IMAGE/pisces_nginx:dev-gl" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/pisces_nginx:main-$PROD_VERSION
    # PiSCES postgres image
    - echo "FROM $CI_REGISTRY_IMAGE/pisces_postgres:dev-gl" > /workspace/Dockerfile
    - /kaniko/executor --context=/workspace --destination=$CI_REGISTRY_IMAGE/pisces_postgres:main-$PROD_VERSION
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

ApplyManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg
      
ApplyPVC:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl apply -f k8s/pisces-postgres-pvc.yml
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

LoadVolumeData:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - chmod 775 ./pisces-volume-setup.sh
    - ./pisces-volume-setup.sh
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

DeleteManifests:
  stage: Deployment
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl delete -f k8s/
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

ScalePods:
  stage: Restart Pods
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl scale deployment pisces-django --replicas=0
    - kubectl scale deployment pisces-django --replicas=1
    - kubectl scale deployment pisces-nginx --replicas=0
    - kubectl scale deployment pisces-nginx --replicas=1
    - kubectl scale sts pisces-postgres --replicas=0
    - kubectl scale sts pisces-postgres --replicas=1
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg

RestartPostGIS:
  stage: Restart Pods
  tags:
    - qed-stg-runner
  when: manual
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --server="$KUBE_URL"
    - kubectl config set-cluster "$KUBECTL_DEV_CLUSTER" --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster="$KUBECTL_DEV_CLUSTER" --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - kubectl scale sts pisces-postgres --replicas=0
    - kubectl scale sts pisces-postgres --replicas=1
  environment:
    name: stg
    url: http://qed.qed-stage.aws.epa.gov
    kubernetes:
      namespace: qed-45-stg


PrismaScanDjango:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
      GIT_STRATEGY: clone
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/pisces_django:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/pisces_django:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN


PrismaScanNginx:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
      GIT_STRATEGY: clone
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/pisces_nginx:$CI_COMMIT_REF_NAME 
    - ./twistcli images scan $CI_REGISTRY_IMAGE/pisces_nginx:$CI_COMMIT_REF_NAME --address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN


PrismaScanPostgres:
  stage: Image Scan
  tags:
    - twistcli
  when: manual
  allow_failure: false
  variables:
      GIT_STRATEGY: clone
  script:
    - 'export PRISMA_CI_TOKEN=$(curl -kH "Content-Type: application/json" -d "{\"username\":\"$prisma_cloud_compute_username\", \"password\":\"$prisma_cloud_compute_password\"}" https://prismacloud.epa.gov/api/v22.12/authenticate | jq -r .token)'
    - 'curl --progress-bar -L -k --header "Authorization: Bearer $PRISMA_CI_TOKEN" https://prismacloud.epa.gov/api/v1/util/twistcli > twistcli; chmod a+x twistcli;'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/pisces_postgres:$CI_COMMIT_REF_NAME
    - ./twistcli images scan $CI_REGISTRY_IMAGE/pisces_postgres:$CI_COMMIT_REF_NAME--address=https://prismacloud.epa.gov --details --token=$PRISMA_CI_TOKEN

